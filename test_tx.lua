#!/usr/bin/env lua
-- Copyright Â© 2025 Mark Summerfield. All rights reserved.

local List = require("list")
local Map = require("map")
local Set = require("set")
local lx = require("lx")
local tx = require("tx")
local check, report = require("check").checker()

local a = Set(2, 4, 6, 8)
local b = tx.clone(a)
check(not a:isempty())
check("{2 4 6 8}" == a:tostring(true), a)
check(#a == 4, 4)
check(a:len() == 4, 4)
check(not b:isempty())
check("{2 4 6 8}" == b:tostring(true), b)
check(#b == 4, 4)
check(b:len() == 4, 4)
check(lx.dump(b) == "{2 4 6 8}")

local c = List()
check(c:isempty())
check(tostring(c) == "[]")
local d = tx.clone(c)
check(d:isempty())
check(tostring(d) == "[]")

c = List(12, 6, 1, 0, 1, 2, 4, 8, 16)
check(not c:isempty())
check(tostring(c) == "[12 6 1 0 1 2 4 8 16]")
check(d:isempty())
d = tx.clone(c)
check(not d:isempty())
check(tostring(d) == "[12 6 1 0 1 2 4 8 16]")
check(lx.dump(d) == "[12 6 1 0 1 2 4 8 16]")

local m1 = Map()
check(m1:typeof() == "Map")
check(tostring(m1) == "{}")
check(m1:isempty())
m1("C or D", 4)
check(not m1:isempty())
check(tostring(m1) == '{"C or D"=4}')
m1("B", 2)
m1("A", 1)
check(m1:tostring(true) == '{"A"=1 "B"=2 "C or D"=4}')
check(m1("G") == nil)
check(m1("B") == 2)
check(m1("A") == 1)
m1("G", 8)
m1("A", -1)
check(m1("e") == nil)
check(m1("G") == 8)
check(m1("A") == -1)
check(m1:remove("X") == nil)
check(m1:remove("A") == -1)
local m2 = tx.clone(m1)
check(m2 == m1)
check(not m2:isempty())
check(m2:tostring(true) == '{"B"=2 "C or D"=4 "G"=8}')
check(m1:tostring(true) == '{"B"=2 "C or D"=4 "G"=8}')
m1("M", "gloop")
m1("H", 55)
m1("B", -5)
m2("M", "hairy")
m2("H", 11)
m2("C or D", 9.5)
check(m1:tostring(true) == '{"B"=-5 "C or D"=4 "G"=8 "H"=55 "M"="gloop"}')
check(m2:tostring(true) == '{"B"=2 "C or D"=9.5 "G"=8 "H"=11 "M"="hairy"}')
check(lx.dump(m2) == '{"B"=2 "C or D"=9.5 "G"=8 "H"=11 "M"="hairy"}')

report("tx")
